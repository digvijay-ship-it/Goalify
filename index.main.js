(()=>{"use strict";var n={368:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,".projectFormDiv {\n  display: flex;\n  flex-direction: column;\n  background-color: rgb(92, 92, 92);\n  height: 150px;\n  align-items: center;\n  justify-self: center;\n  align-self: center;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n\n.submitButton {\n  background-color: rgb(255, 120, 120);\n}\n.cancelButton {\n  background-color: rgb(136, 255, 136);\n}\n\n.buttonDiv {\n  display: flex;\n}\n\n.buttonDiv button {\n  width: 150px;\n  height: 50px;\n  font-size: 1.6rem;\n  font-weight: 800;\n  transition: background-color 0.3s ease;\n  border-radius: 10px;\n}\n.buttonDiv button:hover {\n  opacity: 0.5;\n}\n\n.hidden {\n  display: none;\n}\n.projectFormDiv {\n  width: 300px;\n  height: 200px;\n}\n\n.projectFormContainer {\n  grid-row: 1/-1;\n  grid-column: 2/-1;\n\n  display: grid;\n  background-color: black;\n  position: relative;\n}\n","",{version:3,sources:["webpack://./src/form-for-project/form.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,aAAa;EACb,mBAAmB;EACnB,oBAAoB;EACpB,kBAAkB;EAClB,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;AACtC;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,gBAAgB;EAChB,sCAAsC;EACtC,mBAAmB;AACrB;AACA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;AACA;EACE,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,cAAc;EACd,iBAAiB;;EAEjB,aAAa;EACb,uBAAuB;EACvB,kBAAkB;AACpB",sourcesContent:[".projectFormDiv {\n  display: flex;\n  flex-direction: column;\n  background-color: rgb(92, 92, 92);\n  height: 150px;\n  align-items: center;\n  justify-self: center;\n  align-self: center;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n\n.submitButton {\n  background-color: rgb(255, 120, 120);\n}\n.cancelButton {\n  background-color: rgb(136, 255, 136);\n}\n\n.buttonDiv {\n  display: flex;\n}\n\n.buttonDiv button {\n  width: 150px;\n  height: 50px;\n  font-size: 1.6rem;\n  font-weight: 800;\n  transition: background-color 0.3s ease;\n  border-radius: 10px;\n}\n.buttonDiv button:hover {\n  opacity: 0.5;\n}\n\n.hidden {\n  display: none;\n}\n.projectFormDiv {\n  width: 300px;\n  height: 200px;\n}\n\n.projectFormContainer {\n  grid-row: 1/-1;\n  grid-column: 2/-1;\n\n  display: grid;\n  background-color: black;\n  position: relative;\n}\n"],sourceRoot:""}]);const s=o},424:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,'html {\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,\n    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n}\n\nlabel {\n  background-color: rgb(135, 135, 135);\n  justify-self: center;\n  height: 40px;\n  width: 100%;\n  font-size: xx-large;\n  text-align: center;\n}\ninput {\n  border-radius: 5px;\n  height: 35px;\n  width: 250px;\n  margin-top: auto;\n  margin-bottom: auto;\n  font-size: large;\n}\n\n.mainContainer {\n  display: grid;\n  grid-template-rows: 1fr 7fr;\n  grid-row: 1/-1;\n  grid-column: 2/-1;\n}\n\n.hidden {\n  display: none;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,WAAW;EACX;4DAC0D;AAC5D;;AAEA;EACE,oCAAoC;EACpC,oBAAoB;EACpB,YAAY;EACZ,WAAW;EACX,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,2BAA2B;EAC3B,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf",sourcesContent:['html {\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,\n    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n}\n\nlabel {\n  background-color: rgb(135, 135, 135);\n  justify-self: center;\n  height: 40px;\n  width: 100%;\n  font-size: xx-large;\n  text-align: center;\n}\ninput {\n  border-radius: 5px;\n  height: 35px;\n  width: 250px;\n  margin-top: auto;\n  margin-bottom: auto;\n  font-size: large;\n}\n\n.mainContainer {\n  display: grid;\n  grid-template-rows: 1fr 7fr;\n  grid-row: 1/-1;\n  grid-column: 2/-1;\n}\n\n.hidden {\n  display: none;\n}\n'],sourceRoot:""}]);const s=o},407:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,"body {\n  margin: 0px;\n  background-color: rgba(0, 0, 0, 0.879);\n  width: inherit;\n  height: inherit;\n  display: grid;\n  grid-template-columns: 15% 85%;\n  grid-template-rows: 100%;\n}\n.sidebar {\n  background-color: rgb(144, 144, 144);\n  grid-column: 1/2;\n  grid-row: 1/-1;\n}\n.sideBarHeader {\n  text-align: center;\n  margin: 16px;\n}\n\nsvg {\n  width: 2rem;\n  height: 2rem;\n  align-self: center;\n}\n.sideBarMainDaysContainer div {\n  display: flex;\n  gap: 0.2rem;\n  width: fit-content;\n}\n.myProjects {\n  text-align: center;\n  font-size: 1.3rem;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-evenly;\n}\n.myProjects div,\n.myTags div {\n  align-self: center;\n  margin-left: 2rem;\n}\n\n.myProjects svg {\n  margin-left: auto;\n  margin-right: 2rem;\n}\n.sideBarMain div:hover {\n  color: rgb(77, 77, 255);\n  fill: rgb(77, 77, 255);\n}\n\n.project {\n  margin: 20px auto;\n}\n\n.myTags {\n  text-align: center;\n  font-size: 1.3rem;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-evenly;\n  order: 2;\n}\n\n.myTags svg {\n  margin-left: auto;\n  margin-right: 2rem;\n}\n\n.sideBarMain {\n  display: flex;\n  flex-direction: column;\n}\n","",{version:3,sources:["webpack://./src/makeSideBar/sidebar.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,sCAAsC;EACtC,cAAc;EACd,eAAe;EACf,aAAa;EACb,8BAA8B;EAC9B,wBAAwB;AAC1B;AACA;EACE,oCAAoC;EACpC,gBAAgB;EAChB,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,gBAAgB;EAChB,aAAa;EACb,6BAA6B;AAC/B;AACA;;EAEE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,uBAAuB;EACvB,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,gBAAgB;EAChB,aAAa;EACb,6BAA6B;EAC7B,QAAQ;AACV;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB",sourcesContent:["body {\n  margin: 0px;\n  background-color: rgba(0, 0, 0, 0.879);\n  width: inherit;\n  height: inherit;\n  display: grid;\n  grid-template-columns: 15% 85%;\n  grid-template-rows: 100%;\n}\n.sidebar {\n  background-color: rgb(144, 144, 144);\n  grid-column: 1/2;\n  grid-row: 1/-1;\n}\n.sideBarHeader {\n  text-align: center;\n  margin: 16px;\n}\n\nsvg {\n  width: 2rem;\n  height: 2rem;\n  align-self: center;\n}\n.sideBarMainDaysContainer div {\n  display: flex;\n  gap: 0.2rem;\n  width: fit-content;\n}\n.myProjects {\n  text-align: center;\n  font-size: 1.3rem;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-evenly;\n}\n.myProjects div,\n.myTags div {\n  align-self: center;\n  margin-left: 2rem;\n}\n\n.myProjects svg {\n  margin-left: auto;\n  margin-right: 2rem;\n}\n.sideBarMain div:hover {\n  color: rgb(77, 77, 255);\n  fill: rgb(77, 77, 255);\n}\n\n.project {\n  margin: 20px auto;\n}\n\n.myTags {\n  text-align: center;\n  font-size: 1.3rem;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-evenly;\n  order: 2;\n}\n\n.myTags svg {\n  margin-left: auto;\n  margin-right: 2rem;\n}\n\n.sideBarMain {\n  display: flex;\n  flex-direction: column;\n}\n"],sourceRoot:""}]);const s=o},163:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,".tagButtonContainer {\n  margin: 2rem 1rem;\n  display: flex;\n  justify-content: space-around;\n}\n\n.tagButtonContainer button {\n  font-size: large;\n  font-weight: 600;\n  height: 30px;\n  border-radius: 10px;\n}\n\n.tagButtonContainer :first-child {\n  background-color: rgb(143, 255, 143);\n}\n\n.tagButtonContainer :last-child {\n  background-color: rgb(255, 139, 139);\n}\n\n#TagHome {\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n\n#newTagInputContainer {\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  background-color: rgba(0, 0, 0, 0.523);\n  width: 100%;\n  height: 100%;\n  display: grid;\n  position: relative;\n}\n\n#newTagInputContainer button {\n  font-size: large;\n  font-weight: 600;\n  height: 30px;\n  border-radius: 10px;\n}\n\n#newTagInputContainer div {\n  display: flex;\n  justify-content: space-around;\n}\n\n#tagInputWrapper {\n  display: flex;\n  flex-direction: column;\n  width: min-content;\n  height: min-content;\n  align-self: center;\n  justify-self: center;\n  gap: 1rem;\n}\n\n#newTagInputContainer.hidden {\n  display: none;\n}\n\n.tagWrapper {\n  display: flex;\n  background-color: white;\n  width: 90%;\n  margin: 1rem auto;\n  border-radius: 50px;\n}\n\n.tagWrapper input {\n  width: 2rem;\n  margin-left: 2rem;\n  margin-right: 2rem;\n}\n\n.tagWrapper div {\n  display: flex;\n  font-size: larger;\n  font-weight: 469;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/myPriority/priority.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,sCAAsC;EACtC,WAAW;EACX,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;EACpB,SAAS;AACX;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;EACV,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,gBAAgB;EAChB,mBAAmB;AACrB",sourcesContent:[".tagButtonContainer {\n  margin: 2rem 1rem;\n  display: flex;\n  justify-content: space-around;\n}\n\n.tagButtonContainer button {\n  font-size: large;\n  font-weight: 600;\n  height: 30px;\n  border-radius: 10px;\n}\n\n.tagButtonContainer :first-child {\n  background-color: rgb(143, 255, 143);\n}\n\n.tagButtonContainer :last-child {\n  background-color: rgb(255, 139, 139);\n}\n\n#TagHome {\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n\n#newTagInputContainer {\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  background-color: rgba(0, 0, 0, 0.523);\n  width: 100%;\n  height: 100%;\n  display: grid;\n  position: relative;\n}\n\n#newTagInputContainer button {\n  font-size: large;\n  font-weight: 600;\n  height: 30px;\n  border-radius: 10px;\n}\n\n#newTagInputContainer div {\n  display: flex;\n  justify-content: space-around;\n}\n\n#tagInputWrapper {\n  display: flex;\n  flex-direction: column;\n  width: min-content;\n  height: min-content;\n  align-self: center;\n  justify-self: center;\n  gap: 1rem;\n}\n\n#newTagInputContainer.hidden {\n  display: none;\n}\n\n.tagWrapper {\n  display: flex;\n  background-color: white;\n  width: 90%;\n  margin: 1rem auto;\n  border-radius: 50px;\n}\n\n.tagWrapper input {\n  width: 2rem;\n  margin-left: 2rem;\n  margin-right: 2rem;\n}\n\n.tagWrapper div {\n  display: flex;\n  font-size: larger;\n  font-weight: 469;\n  align-items: center;\n}\n"],sourceRoot:""}]);const s=o},257:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,"#popUpContainerDate {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#datePicker {\n  height: 400px;\n  width: 600px;\n  background-color: white;\n  padding: 20px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n}\n.RemindMePanel {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  grid-row: 1/-1;\n  grid-column: 2/-1;\n}\n\n#popUpContainerDate.hidden {\n  display: none;\n}\n.dateAction {\n  display: flex;\n  flex-direction: column;\n}\n.dateAction button {\n  font-weight: 900;\n}\n\n.TaskDetailButtonContainer {\n  display: flex;\n  gap: 1rem;\n  flex-direction: column;\n}\n.TaskDetailButtonContainer button {\n  margin-right: auto;\n}\n.TaskDetailButtonContainer p {\n  height: min-content;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  margin-right: 50%;\n}\n\n.dateContainer {\n  display: flex;\n}\n","",{version:3,sources:["webpack://./src/task/taskDetailViewDependency.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,oCAAoC;EACpC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,aAAa;EACb,aAAa;EACb,8BAA8B;EAC9B,2BAA2B;AAC7B;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,sBAAsB;AACxB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;EACnB,eAAe;EACf,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf",sourcesContent:["#popUpContainerDate {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#datePicker {\n  height: 400px;\n  width: 600px;\n  background-color: white;\n  padding: 20px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n}\n.RemindMePanel {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  grid-row: 1/-1;\n  grid-column: 2/-1;\n}\n\n#popUpContainerDate.hidden {\n  display: none;\n}\n.dateAction {\n  display: flex;\n  flex-direction: column;\n}\n.dateAction button {\n  font-weight: 900;\n}\n\n.TaskDetailButtonContainer {\n  display: flex;\n  gap: 1rem;\n  flex-direction: column;\n}\n.TaskDetailButtonContainer button {\n  margin-right: auto;\n}\n.TaskDetailButtonContainer p {\n  height: min-content;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  margin-right: 50%;\n}\n\n.dateContainer {\n  display: flex;\n}\n"],sourceRoot:""}]);const s=o},31:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,".taskDetailsContainer {\n  background-color: rgba(0, 0, 0, 0.911);\n  align-self: center;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  width: 500px;\n  height: 600px;\n  color: white;\n  overflow: scroll;\n}\n.taskDetailHeaderContainer {\n  display: flex;\n}\n.taskDetailHeaderContainer p {\n  height: min-content;\n  margin: 0px;\n  margin-bottom: 20px;\n}\n.taskDetailHeaderContainer button {\n  font-weight: 900;\n  font-size: 1rem;\n  height: max-content;\n}\n.closeTaskContainerButton {\n  background-color: red;\n  margin-left: auto;\n}\n.saveState {\n  margin-left: auto;\n  background-color: aqua;\n}\n.taskDetailsContainer svg {\n  background-color: aliceblue;\n}\n.newTempSubTaskDiv {\n  display: flex;\n}\n.preSubTaskDiv {\n  color: black;\n}\n.preSubTaskDiv div input {\n  background-color: rgb(135, 255, 135);\n}\n\n.preCompletedSubTaskDiv div input {\n  background-color: rgb(255, 129, 129);\n}\n.inputWrapper :first-child {\n  background-color: aqua;\n  width: min-content;\n  justify-self: end;\n}\n.inputWrapper {\n  display: grid;\n  grid-template-columns: 1fr 10fr;\n  grid-template-rows: 1fr;\n}\n.inputWrapper input:last-of-type {\n  width: 90%;\n  justify-self: center;\n  grid-column: 2/-1;\n  grid-row: 1/-1;\n  height: min-content;\n}\n.hidden {\n  display: none;\n}\n.crossLine {\n  grid-column: 2/-1;\n  grid-row: 1/-1;\n  width: 95%;\n  height: 1px;\n  border: 0px;\n  background-color: white;\n  margin: auto;\n}\n.taskNameUpdate {\n  margin: 1rem;\n}\n.descContainer,\n.TaskDetailButtonContainer {\n  display: flex;\n  margin: 1rem;\n}\n.descContainer label,\n.TaskDetailButtonContainer label {\n  width: min-content;\n  font-size: 1rem;\n  display: flex;\n  /* height: 100%; */\n  align-items: center;\n}\n\n.subTaskContainer {\n  display: flex;\n  gap: 1rem;\n  justify-content: flex-start;\n  margin: 1rem;\n}\n\n.taskDetailTitle {\n  margin-left: 16px;\n}\n\n.priorityMultiSelectContainer {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.807);\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  display: grid;\n  /* flex-direction: column; */\n  align-content: center;\n  justify-content: center;\n}\n\n.taskDetailViewContainer {\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  background-color: rgba(0, 0, 0, 0.922);\n  display: flex;\n  justify-content: center;\n}\n\n.CompletedTask {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.CompletedTask .closeTaskContainerButton {\n  pointer-events: auto;\n}\n.priorityContainerButtons {\n  display: flex;\n  justify-content: space-around;\n}\n.priorityContainerButtons button {\n  height: 40px;\n  flex: 1;\n  border-radius: 0.5rem;\n}\n","",{version:3,sources:["webpack://./src/task/taskIndividualDisplay.css"],names:[],mappings:"AAAA;EACE,sCAAsC;EACtC,kBAAkB;EAClB,cAAc;EACd,iBAAiB;EACjB,YAAY;EACZ,aAAa;EACb,YAAY;EACZ,gBAAgB;AAClB;AACA;EACE,aAAa;AACf;AACA;EACE,mBAAmB;EACnB,WAAW;EACX,mBAAmB;AACrB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,iBAAiB;EACjB,sBAAsB;AACxB;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,aAAa;AACf;AACA;EACE,YAAY;AACd;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;AACtC;AACA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,+BAA+B;EAC/B,uBAAuB;AACzB;AACA;EACE,UAAU;EACV,oBAAoB;EACpB,iBAAiB;EACjB,cAAc;EACd,mBAAmB;AACrB;AACA;EACE,aAAa;AACf;AACA;EACE,iBAAiB;EACjB,cAAc;EACd,UAAU;EACV,WAAW;EACX,WAAW;EACX,uBAAuB;EACvB,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;;EAEE,aAAa;EACb,YAAY;AACd;AACA;;EAEE,kBAAkB;EAClB,eAAe;EACf,aAAa;EACb,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,sCAAsC;EACtC,cAAc;EACd,iBAAiB;EACjB,aAAa;EACb,4BAA4B;EAC5B,qBAAqB;EACrB,uBAAuB;AACzB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,sCAAsC;EACtC,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,oBAAoB;EACpB,YAAY;AACd;AACA;EACE,oBAAoB;AACtB;AACA;EACE,aAAa;EACb,6BAA6B;AAC/B;AACA;EACE,YAAY;EACZ,OAAO;EACP,qBAAqB;AACvB",sourcesContent:[".taskDetailsContainer {\n  background-color: rgba(0, 0, 0, 0.911);\n  align-self: center;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  width: 500px;\n  height: 600px;\n  color: white;\n  overflow: scroll;\n}\n.taskDetailHeaderContainer {\n  display: flex;\n}\n.taskDetailHeaderContainer p {\n  height: min-content;\n  margin: 0px;\n  margin-bottom: 20px;\n}\n.taskDetailHeaderContainer button {\n  font-weight: 900;\n  font-size: 1rem;\n  height: max-content;\n}\n.closeTaskContainerButton {\n  background-color: red;\n  margin-left: auto;\n}\n.saveState {\n  margin-left: auto;\n  background-color: aqua;\n}\n.taskDetailsContainer svg {\n  background-color: aliceblue;\n}\n.newTempSubTaskDiv {\n  display: flex;\n}\n.preSubTaskDiv {\n  color: black;\n}\n.preSubTaskDiv div input {\n  background-color: rgb(135, 255, 135);\n}\n\n.preCompletedSubTaskDiv div input {\n  background-color: rgb(255, 129, 129);\n}\n.inputWrapper :first-child {\n  background-color: aqua;\n  width: min-content;\n  justify-self: end;\n}\n.inputWrapper {\n  display: grid;\n  grid-template-columns: 1fr 10fr;\n  grid-template-rows: 1fr;\n}\n.inputWrapper input:last-of-type {\n  width: 90%;\n  justify-self: center;\n  grid-column: 2/-1;\n  grid-row: 1/-1;\n  height: min-content;\n}\n.hidden {\n  display: none;\n}\n.crossLine {\n  grid-column: 2/-1;\n  grid-row: 1/-1;\n  width: 95%;\n  height: 1px;\n  border: 0px;\n  background-color: white;\n  margin: auto;\n}\n.taskNameUpdate {\n  margin: 1rem;\n}\n.descContainer,\n.TaskDetailButtonContainer {\n  display: flex;\n  margin: 1rem;\n}\n.descContainer label,\n.TaskDetailButtonContainer label {\n  width: min-content;\n  font-size: 1rem;\n  display: flex;\n  /* height: 100%; */\n  align-items: center;\n}\n\n.subTaskContainer {\n  display: flex;\n  gap: 1rem;\n  justify-content: flex-start;\n  margin: 1rem;\n}\n\n.taskDetailTitle {\n  margin-left: 16px;\n}\n\n.priorityMultiSelectContainer {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.807);\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  display: grid;\n  /* flex-direction: column; */\n  align-content: center;\n  justify-content: center;\n}\n\n.taskDetailViewContainer {\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  background-color: rgba(0, 0, 0, 0.922);\n  display: flex;\n  justify-content: center;\n}\n\n.CompletedTask {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.CompletedTask .closeTaskContainerButton {\n  pointer-events: auto;\n}\n.priorityContainerButtons {\n  display: flex;\n  justify-content: space-around;\n}\n.priorityContainerButtons button {\n  height: 40px;\n  flex: 1;\n  border-radius: 0.5rem;\n}\n"],sourceRoot:""}]);const s=o},84:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),a=e(645),o=e.n(a)()(i());o.push([n.id,".taskContainer {\n  background-color: aliceblue;\n  height: 80%;\n  min-width: 500px;\n  max-width: 500px;\n  margin-top: 8%;\n  margin-left: 2.5%;\n  border-radius: 10px;\n  transition: 20ms;\n  display: flex;\n  flex-direction: column;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n.taskListContainer {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  border: 2px rgb(144, 144, 144) solid;\n  border-radius: 10px;\n}\n.taskListContainer div {\n  display: flex;\n}\n\n.inputContainer {\n  display: flex;\n}\n.inputContainer input {\n  flex: 1;\n}\n\n.incompleteTaskContainer {\n  display: flex;\n  flex-direction: column;\n}\n.completedTaskContainer {\n  background-color: gray;\n  background: linear-gradient(\n    to right,\n    rgba(0, 0, 0, 0.523) 1%,\n    transparent 50%\n  );\n  background-size: 1px 200px; /* Adjust the size of the cross line */\n  background-position: 0 50%;\n}\n.taskListContainer > div {\n  display: flex;\n  flex-direction: column;\n}\n\n.taskDiv {\n  gap: 20px;\n  border: 2px rgb(144, 144, 144) solid;\n  border-radius: 10px;\n}\n.taskDiv > input {\n  width: min-content;\n  height: min-content;\n}\n.taskDiv > p {\n  width: 50%;\n  margin: 0px;\n  height: 30px;\n  display: grid;\n  align-items: center;\n  align-self: center;\n  font-size: 1rem;\n}\n\n.taskContainerHeader {\n  display: flex;\n  margin-top: 1%;\n  margin-left: 2.5%;\n  gap: 50px;\n  background-color: gray;\n  width: fit-content;\n  height: 40px;\n  border-radius: 10px;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n.taskContainerHeader button {\n  font-size: 1rem;\n  font-weight: 600;\n  height: max-content;\n  align-self: center;\n  margin-right: 20px;\n}\n.taskContainerHeader h2 {\n  margin-left: 20px;\n  align-self: center;\n}\n.taskOtherDetailContainer {\n  /* width: 100%; */\n  display: flex;\n}\n.taskTagContainer {\n  margin-left: auto;\n  margin-right: 1rem;\n}\n.taskTagContainer label {\n  font-size: 15px;\n  display: inline;\n}\n","",{version:3,sources:["webpack://./src/task/taskListDisplay.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,WAAW;EACX,gBAAgB;EAChB,gBAAgB;EAChB,cAAc;EACd,iBAAiB;EACjB,mBAAmB;EACnB,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,cAAc;EACd,iBAAiB;AACnB;AACA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,cAAc;EACd,oCAAoC;EACpC,mBAAmB;AACrB;AACA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;AACA;EACE,OAAO;AACT;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,sBAAsB;EACtB;;;;GAIC;EACD,0BAA0B,EAAE,sCAAsC;EAClE,0BAA0B;AAC5B;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,oCAAoC;EACpC,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;AACA;EACE,UAAU;EACV,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,cAAc;EACd,iBAAiB;EACjB,SAAS;EACT,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;EACnB,cAAc;EACd,iBAAiB;AACnB;AACA;EACE,eAAe;EACf,gBAAgB;EAChB,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;AACpB;AACA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,iBAAiB;EACjB,aAAa;AACf;AACA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,eAAe;AACjB",sourcesContent:[".taskContainer {\n  background-color: aliceblue;\n  height: 80%;\n  min-width: 500px;\n  max-width: 500px;\n  margin-top: 8%;\n  margin-left: 2.5%;\n  border-radius: 10px;\n  transition: 20ms;\n  display: flex;\n  flex-direction: column;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n.taskListContainer {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  border: 2px rgb(144, 144, 144) solid;\n  border-radius: 10px;\n}\n.taskListContainer div {\n  display: flex;\n}\n\n.inputContainer {\n  display: flex;\n}\n.inputContainer input {\n  flex: 1;\n}\n\n.incompleteTaskContainer {\n  display: flex;\n  flex-direction: column;\n}\n.completedTaskContainer {\n  background-color: gray;\n  background: linear-gradient(\n    to right,\n    rgba(0, 0, 0, 0.523) 1%,\n    transparent 50%\n  );\n  background-size: 1px 200px; /* Adjust the size of the cross line */\n  background-position: 0 50%;\n}\n.taskListContainer > div {\n  display: flex;\n  flex-direction: column;\n}\n\n.taskDiv {\n  gap: 20px;\n  border: 2px rgb(144, 144, 144) solid;\n  border-radius: 10px;\n}\n.taskDiv > input {\n  width: min-content;\n  height: min-content;\n}\n.taskDiv > p {\n  width: 50%;\n  margin: 0px;\n  height: 30px;\n  display: grid;\n  align-items: center;\n  align-self: center;\n  font-size: 1rem;\n}\n\n.taskContainerHeader {\n  display: flex;\n  margin-top: 1%;\n  margin-left: 2.5%;\n  gap: 50px;\n  background-color: gray;\n  width: fit-content;\n  height: 40px;\n  border-radius: 10px;\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n}\n.taskContainerHeader button {\n  font-size: 1rem;\n  font-weight: 600;\n  height: max-content;\n  align-self: center;\n  margin-right: 20px;\n}\n.taskContainerHeader h2 {\n  margin-left: 20px;\n  align-self: center;\n}\n.taskOtherDetailContainer {\n  /* width: 100%; */\n  display: flex;\n}\n.taskTagContainer {\n  margin-left: auto;\n  margin-right: 1rem;\n}\n.taskTagContainer label {\n  font-size: 15px;\n  display: inline;\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&o[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),t.push(l))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var d=n[s],c=r.base?d[0]+r.base:d[0],l=a[c]||0,u="".concat(c," ").concat(l);a[c]=l+1;var A=e(u),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var m=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}o.push(u)}return o}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=e(a[o]);t[s].references--}for(var d=r(n,i),c=0;c<a.length;c++){var l=e(a[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=d}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),i=e.n(r),a=e(569),o=e.n(a),s=e(565),d=e.n(s),c=e(216),l=e.n(c),u=e(589),A=e.n(u),p=e(424),m={};m.styleTagTransform=A(),m.setAttributes=d(),m.insert=o().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),t()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var g=e(407),C={};function f(n,t=""){const e=document.createElement(n);return t&&e.classList.add(t),e}function h(){document.querySelector(".mainContainer").innerText=""}function b(n,t=""){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");return e.setAttribute("viewBox","0 0 24 24"),e.innerHTML=n,e}C.styleTagTransform=A(),C.setAttributes=d(),C.insert=o().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=l(),t()(g.Z,C),g.Z&&g.Z.locals&&g.Z.locals;const E=function(){let n=new Map;return n.set(0,"Important"),n.set(1,"Work"),n.set(2,"Urgent"),n.set(3,"Priority"),n.set(4,"Family"),{appendNewTag:(t,e)=>{n.set(t,e),v()},returnLatestTagObject:()=>n,deleteOneTagObjectProperty:t=>{const e=parseInt(t);n.delete(e),v()},setTagObject:t=>{n=t}}}(),B=function(){let n={default:[]},t={default:[]};return{setLatestProjectList:t=>{n=t},setLatestCompletedProjectList:n=>{t=n},appendNewProject:e=>{n[e]=[],t[e]=[],v()},returnLatestProjectList:()=>n,appendNewTaskObj:(t,e)=>{n[t].push(e),v()},returnLatestCompletedProjectList:()=>t,appendFromProjectListToCompleteProjectList:(e,r)=>{t[e].push(n[e].splice(r,1)[0]),v()},appendFromCompleteProjectListToProjectList:(e,r)=>{n[e].push(t[e].splice(r,1)[0]),v()},clearCompletedProject:n=>{t[n]=[],v()},addSubTaskToTask:(t,e,r)=>{n[t][e].subTaskList.push(r),v()},returnSubtaskList:(t,e)=>n[t][e].subTaskList,returnSubtaskListOfCompletedTask:(n,e)=>t[n][e].subTaskList,returnCompleteSubtaskList:(t,e)=>n[t][e].completeSubTaskList,returnCompleteSubtaskListOfCompletedTask:(n,e)=>t[n][e].completeSubTaskList,updateSubTask:(t,e,r,i)=>{n[t][e].subTaskList[r]=i,v()},insertFromSubtaskListToCompletedSubTaskList:(t,e,r)=>{n[t][e].completeSubTaskList.push(n[t][e].subTaskList.splice(r,1)[0]),v()},insertFromCompleteSubtaskListToSubTaskList:(t,e,r)=>{n[t][e].subTaskList.push(n[t][e].completeSubTaskList.splice(r,1)[0]),v()},updateTaskTitle:(t,e,r)=>{n[t][e].title=r,v()},addDateToTask:(t,e,r)=>{n[t][e].dueDate=r,v()},returnTaskDate:(t,e)=>n[t][e].dueDate,returnTaskDateOfCompleteTask:(n,e)=>t[n][e].dueDate,updateTaskDescription:(t,e,r)=>{n[t][e].notes=r,v()},returnTaskDescription:(t,e)=>n[t][e].notes,returnTaskDescriptionOfCompletedTask:(n,e)=>t[n][e].notes,returnTaskPriorityList:(t,e)=>n[t][e].priorityList,returnCompletedTaskPriorityList:(n,e)=>t[n][e].priorityList,deleteTagFromTaskList:(t,e,r)=>{const i=n[t][e].priorityList.indexOf(parseInt(r));-1===i&&0!==i||n[t][e].priorityList.splice(i,1),v()},addTagToTaskList:(t,e,r)=>{n[t][e].priorityList.push(parseInt(r)),v()}}}();function v(){const n=JSON.stringify(B.returnLatestProjectList()),t=JSON.stringify(B.returnLatestCompletedProjectList()),e=JSON.stringify([...E.returnLatestTagObject()]);localStorage.setItem("projectObject",n),localStorage.setItem("completedProjectObject",t),localStorage.setItem("priorityObj",e)}(function(n){let t;try{t=window.localStorage;const n="__storage_test__";return t.setItem(n,n),t.removeItem(n),t}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)&&t&&0!==t.length}})()&&(window.localStorage&&Object.keys(window.localStorage).length>0?function(){const n=new Map(JSON.parse(localStorage.getItem("priorityObj")));E.setTagObject(n),B.setLatestProjectList(JSON.parse(localStorage.getItem("projectObject"))),B.setLatestCompletedProjectList(JSON.parse(localStorage.getItem("completedProjectObject")))}():v());var y=e(163),k={};function w(){const n=document.querySelector("#TagsContainer");n.innerText="";const t=E.returnLatestTagObject();for(let[e,r]of t){const t=f("div","tagWrapper"),i=f("input",`${e}`);i.setAttribute("type","checkbox");const a=document.createElement("div");a.textContent=r,t.append(i,a),n.append(t)}}k.styleTagTransform=A(),k.setAttributes=d(),k.insert=o().bind(null,"head"),k.domAPI=i(),k.insertStyleElement=l(),t()(y.Z,k),y.Z&&y.Z.locals&&y.Z.locals;var T=e(84),x={};function S(n){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},S(n)}function L(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function D(n){L(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===S(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function j(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function P(n){L(1,arguments);var t=D(n),e=t.getUTCDay(),r=(e<1?7:0)+e-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function M(n){L(1,arguments);var t=D(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var i=P(r),a=new Date(0);a.setUTCFullYear(e,0,4),a.setUTCHours(0,0,0,0);var o=P(a);return t.getTime()>=i.getTime()?e+1:t.getTime()>=o.getTime()?e:e-1}x.styleTagTransform=A(),x.setAttributes=d(),x.insert=o().bind(null,"head"),x.domAPI=i(),x.insertStyleElement=l(),t()(T.Z,x),T.Z&&T.Z.locals&&T.Z.locals;var W={};function q(){return W}function Y(n,t){var e,r,i,a,o,s,d,c;L(1,arguments);var l=q(),u=j(null!==(e=null!==(r=null!==(i=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==i?i:l.weekStartsOn)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==e?e:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=D(n),p=A.getUTCDay(),m=(p<u?7:0)+p-u;return A.setUTCDate(A.getUTCDate()-m),A.setUTCHours(0,0,0,0),A}function O(n,t){var e,r,i,a,o,s,d,c;L(1,arguments);var l=D(n),u=l.getUTCFullYear(),A=q(),p=j(null!==(e=null!==(r=null!==(i=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:A.firstWeekContainsDate)&&void 0!==r?r:null===(d=A.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(u+1,0,p),m.setUTCHours(0,0,0,0);var g=Y(m,t),C=new Date(0);C.setUTCFullYear(u,0,p),C.setUTCHours(0,0,0,0);var f=Y(C,t);return l.getTime()>=g.getTime()?u+1:l.getTime()>=f.getTime()?u:u-1}function U(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const H=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return U("yy"===t?r%100:r,t.length)},N=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):U(e+1,2)},I=function(n,t){return U(n.getUTCDate(),t.length)},Z=function(n,t){return U(n.getUTCHours()%12||12,t.length)},z=function(n,t){return U(n.getUTCHours(),t.length)},F=function(n,t){return U(n.getUTCMinutes(),t.length)},V=function(n,t){return U(n.getUTCSeconds(),t.length)},R=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return U(Math.floor(r*Math.pow(10,e-3)),t.length)};var X={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),i=r>0?r:1-r;return e.ordinalNumber(i,{unit:"year"})}return H(n,t)},Y:function(n,t,e,r){var i=O(n,r),a=i>0?i:1-i;return"YY"===t?U(a%100,2):"Yo"===t?e.ordinalNumber(a,{unit:"year"}):U(a,t.length)},R:function(n,t){return U(M(n),t.length)},u:function(n,t){return U(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return U(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return U(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return N(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return U(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var i=function(n,t){L(1,arguments);var e=D(n),r=Y(e,t).getTime()-function(n,t){var e,r,i,a,o,s,d,c;L(1,arguments);var l=q(),u=j(null!==(e=null!==(r=null!==(i=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:l.firstWeekContainsDate)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1),A=O(n,t),p=new Date(0);return p.setUTCFullYear(A,0,u),p.setUTCHours(0,0,0,0),Y(p,t)}(e,t).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===t?e.ordinalNumber(i,{unit:"week"}):U(i,t.length)},I:function(n,t,e){var r=function(n){L(1,arguments);var t=D(n),e=P(t).getTime()-function(n){L(1,arguments);var t=M(n),e=new Date(0);return e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0),P(e)}(t).getTime();return Math.round(e/6048e5)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):U(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):I(n,t)},D:function(n,t,e){var r=function(n){L(1,arguments);var t=D(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=e-t.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):U(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var i=n.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return U(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(i,{width:"short",context:"formatting"});default:return e.day(i,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var i=n.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return U(a,t.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(i,{width:"narrow",context:"standalone"});case"cccccc":return e.day(i,{width:"short",context:"standalone"});default:return e.day(i,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),i=0===r?7:r;switch(t){case"i":return String(i);case"ii":return U(i,t.length);case"io":return e.ordinalNumber(i,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,i=n.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,i=n.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return Z(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):z(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):U(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):U(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):F(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):V(n,t)},S:function(n,t){return R(n,t)},X:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return G(i);case"XXXX":case"XX":return _(i);default:return _(i,":")}},x:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return G(i);case"xxxx":case"xx":return _(i);default:return _(i,":")}},O:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Q(i,":");default:return"GMT"+_(i,":")}},z:function(n,t,e,r){var i=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Q(i,":");default:return"GMT"+_(i,":")}},t:function(n,t,e,r){var i=r._originalDate||n;return U(Math.floor(i.getTime()/1e3),t.length)},T:function(n,t,e,r){return U((r._originalDate||n).getTime(),t.length)}};function Q(n,t){var e=n>0?"-":"+",r=Math.abs(n),i=Math.floor(r/60),a=r%60;if(0===a)return e+String(i);var o=t||"";return e+String(i)+o+U(a,2)}function G(n,t){return n%60==0?(n>0?"-":"+")+U(Math.abs(n)/60,2):_(n,t)}function _(n,t){var e=t||"",r=n>0?"-":"+",i=Math.abs(n);return r+U(Math.floor(i/60),2)+e+U(i%60,2)}const J=X;var $=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},K=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const nn={p:K,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],i=r[1],a=r[2];if(!a)return $(n,t);switch(i){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",$(i,t)).replace("{{time}}",K(a,t))}};var tn=["D","DD"],en=["YY","YYYY"];function rn(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var an={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function on(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const sn={date:on({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:on({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:on({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var dn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function cn(n){return function(t,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,a=null!=e&&e.width?String(e.width):i;r=n.formattingValues[a]||n.formattingValues[i]}else{var o=n.defaultWidth,s=null!=e&&e.width?String(e.width):n.defaultWidth;r=n.values[s]||n.values[o]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const ln={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:cn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:cn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:cn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:cn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:cn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function un(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,i=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=t.match(i);if(!a)return null;var o,s=a[0],d=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(d)?function(n,t){for(var e=0;e<n.length;e++)if(n[e].test(s))return e}(d):function(n,t){for(var e in n)if(n.hasOwnProperty(e)&&n[e].test(s))return e}(d);return o=n.valueCallback?n.valueCallback(c):c,{value:o=e.valueCallback?e.valueCallback(o):o,rest:t.slice(s.length)}}}var An,pn={ordinalNumber:(An={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(An.matchPattern);if(!e)return null;var r=e[0],i=n.match(An.parsePattern);if(!i)return null;var a=An.valueCallback?An.valueCallback(i[0]):i[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:n.slice(r.length)}}),era:un({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:un({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:un({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:un({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:un({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const mn={code:"en-US",formatDistance:function(n,t,e){var r,i=an[n];return r="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:sn,formatRelative:function(n,t,e,r){return dn[n]},localize:ln,match:pn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var gn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Cn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fn=/^'([^]*?)'?$/,hn=/''/g,bn=/[a-zA-Z]/;function En(n,t,e){var r,i,a,o,s,d,c,l,u,A,p,m,g,C,f,h,b,E;L(2,arguments);var B=String(t),v=q(),y=null!==(r=null!==(i=null==e?void 0:e.locale)&&void 0!==i?i:v.locale)&&void 0!==r?r:mn,k=j(null!==(a=null!==(o=null!==(s=null!==(d=null==e?void 0:e.firstWeekContainsDate)&&void 0!==d?d:null==e||null===(c=e.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:v.firstWeekContainsDate)&&void 0!==o?o:null===(u=v.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=j(null!==(p=null!==(m=null!==(g=null!==(C=null==e?void 0:e.weekStartsOn)&&void 0!==C?C:null==e||null===(f=e.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==g?g:v.weekStartsOn)&&void 0!==m?m:null===(b=v.locale)||void 0===b||null===(E=b.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==p?p:0);if(!(w>=0&&w<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!y.localize)throw new RangeError("locale must contain localize property");if(!y.formatLong)throw new RangeError("locale must contain formatLong property");var T=D(n);if(!function(n){if(L(1,arguments),!function(n){return L(1,arguments),n instanceof Date||"object"===S(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var t=D(n);return!isNaN(Number(t))}(T))throw new RangeError("Invalid time value");var x=function(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}(T),P=function(n,t){return L(2,arguments),function(n,t){L(2,arguments);var e=D(n).getTime(),r=j(t);return new Date(e+r)}(n,-j(t))}(T,x),M={firstWeekContainsDate:k,weekStartsOn:w,locale:y,_originalDate:T};return B.match(Cn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,nn[t])(n,y.formatLong):n})).join("").match(gn).map((function(r){if("''"===r)return"'";var i,a,o=r[0];if("'"===o)return(a=(i=r).match(fn))?a[1].replace(hn,"'"):i;var s,d=J[o];if(d)return null!=e&&e.useAdditionalWeekYearTokens||(s=r,-1===en.indexOf(s))||rn(r,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!function(n){return-1!==tn.indexOf(n)}(r)||rn(r,t,String(n)),d(P,r,y.localize,M);if(o.match(bn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}var Bn=e(31),vn={};vn.styleTagTransform=A(),vn.setAttributes=d(),vn.insert=o().bind(null,"head"),vn.domAPI=i(),vn.insertStyleElement=l(),t()(Bn.Z,vn),Bn.Z&&Bn.Z.locals&&Bn.Z.locals;var yn=e(257),kn={};function wn(n,t){L(2,arguments);var e=D(n),r=j(t);return isNaN(r)?new Date(NaN):r?(e.setDate(e.getDate()+r),e):e}function Tn(n,t,e){let r;if(r="complete"===e?B.returnTaskDateOfCompleteTask(n,t):B.returnTaskDate(n,t),r){const n=document.querySelector(".dateContainer"),t=f("p","datePera");t.innerText=En(r,"dd/MM/yyyy"),n.append(t)}}function xn(){const n=document.querySelector(".taskDetailTitle"),t=n.classList.item(1),e=n.classList.item(2),r=document.querySelector("#popUpContainerDate"),i=document.querySelector("#openPopup"),a=document.querySelector("#closePopup"),o=document.getElementById("submitReminder"),s=document.querySelector(".tomorrowButton"),d=document.querySelector(".nextWeekButton");r.addEventListener("click",(n=>{n.target===r&&r.classList.add("hidden")})),i.addEventListener("click",(()=>{r.classList.remove("hidden")})),a.addEventListener("click",(()=>{r.classList.add("hidden")})),o.addEventListener("click",(()=>{const n=new Date(dateInput.value);isNaN(n)||(B.addDateToTask(t,e,n),r.classList.add("hidden"),Tn(t,e))})),s.addEventListener("click",(()=>{const n=wn(new Date,1);B.addDateToTask(t,e,n),r.classList.add("hidden"),Tn(t,e)})),d.addEventListener("click",(()=>{const n=new Date;n.setHours(9),n.setMinutes(0),n.setSeconds(0);const i=function(n,t){return L(2,arguments),wn(n,7*j(t))}(n,1);B.addDateToTask(t,e,i),r.classList.add("hidden"),Tn(t,e)}))}function Sn(n,t,e,r){const i=e.querySelector(":first-child");if(t.target!==i){const a=i.classList.item(0),o=f("div","taskDetailViewContainer"),s=f("div","taskDetailsContainer");"complete"===r&&s.classList.add("CompletedTask");const d=function(n){const t=f("div","taskDetailHeaderContainer"),e=f("p");e.innerText="Project Name->"+n;const r=f("button","closeTaskContainerButton");return r.innerText="Close",r.addEventListener("click",(()=>{document.querySelector(".taskDetailViewContainer").remove(),qn.fillInCompleteTaskListContainer(n)})),t.append(e,r),t}(n),c=function(n,t,e){const r=f("input","taskDetailTitle");r.classList.add(t),r.classList.add(e),r.value=n;let i=n;return r.addEventListener("blur",(function(n){const r=n.target.value;r&&i!==r&&(i=r,B.updateTaskTitle(t,e,r))})),r}(t.target.textContent,n,a),l=f("div","TaskDetailButtonContainer"),u=f("div","dateContainer"),A=f("button","createPriorityContainerButton");A.innerText="Set priority",A.addEventListener("click",(()=>{const t=document.querySelector(".mainContainer");!function(){const n=document.querySelector(".priorityMultiSelectContainer");n&&n.remove()}();const e=f("div","priorityMultiSelectContainer"),r=E.returnLatestTagObject(),i=B.returnTaskPriorityList(n,a),o=f("div","tagContainer"),s=f("div","preTagContainer"),d=f("div","nonPreTagContainer");for(const[n,t]of r)if(i.includes(n)){const e=f("div","tagWrapper"),r=f("input");r.setAttribute("id",`${n}`),r.setAttribute("type","checkbox"),r.checked=!0;const i=f("label");i.innerText=t,e.appendChild(r),e.appendChild(i),s.append(e)}else{const e=f("div","tagWrapper"),r=f("input");r.setAttribute("id",`${n}`),r.setAttribute("type","checkbox");const i=f("label");i.innerText=t,e.appendChild(r),e.appendChild(i),d.append(e)}const c=f("div","priorityContainerButtons"),l=f("button","priorityContainerSubmit");l.innerText="Submit",l.addEventListener("click",(()=>{w(n,a),T(n,a),e.remove()}));const u=f("button","priorityContainerClose");u.innerText="Close",u.addEventListener("click",(()=>{e.remove()})),c.append(l,u),o.append(s,d),e.append(o,c),t.append(e)})),l.append(u,A);const p=f("div","descContainer"),m=f("div","preSubTaskContainer"),g=f("div","preSubTaskDiv"),C=f("div","preCompletedSubTaskDiv");m.append(g,C);const h=f("div","newTempSubTaskDiv"),v=f("div","subTaskContainer"),y=f("input","subTaskInput"),k=b('<title>plus</title><path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />');function w(n,t){const e=document.querySelectorAll(".preTagContainer .tagWrapper");for(let r=0;r<e.length;r++)if(!e[r].querySelector("input").checked){const i=e[r].querySelector("input").getAttribute("id");B.deleteTagFromTaskList(n,t,i)}}function T(n,t){const e=document.querySelectorAll(".nonPreTagContainer .tagWrapper");for(let r=0;r<e.length;r++)if(e[r].querySelector("input").checked){const i=e[r].querySelector("input").getAttribute("id");B.addTagToTaskList(n,t,i)}}y.setAttribute("placeholder","Add sub task"),y.disabled=!0,v.append(k,y),v.addEventListener("click",Ln.bind(this,n,a)),s.append(d,c,l,p,m,h,v),o.append(s),document.querySelector(".mainContainer").append(o),function(n,t,e){const r=document.querySelector(".dateContainer"),i=document.createElement("button");i.setAttribute("id","openPopup"),i.textContent="Set Reminder";const a=document.createElement("div");a.setAttribute("id","popUpContainerDate"),a.classList.add("hidden");const o=document.createElement("div");o.setAttribute("id","datePicker");const s=document.createElement("input");s.setAttribute("type","datetime-local"),s.setAttribute("id","dateInput");const d=document.createElement("div");d.classList.add("RemindMePanel");const c=f("button","tomorrowButton");c.textContent="Tomorrow";const l=f("button","nextWeekButton");l.textContent="Next Week",d.appendChild(c),d.appendChild(l);const u=document.createElement("div");u.classList.add("dateAction");const A=document.createElement("button");A.setAttribute("id","submitReminder"),A.textContent="Submit";const p=document.createElement("button");p.setAttribute("id","closePopup"),p.textContent="Close",u.appendChild(A),u.appendChild(p),o.appendChild(s),o.appendChild(d),o.appendChild(u),a.appendChild(o);const m=document.querySelector("body");r.append(i),Tn(n,t,e),m.append(a),xn()}(n,a,r),function(n,t,e){const r=document.querySelector(".descContainer"),i=f("label");i.innerText="Notes",i.setAttribute("for","notes");const a=f("input");a.setAttribute("id","notes"),a.value="complete"===e?B.returnTaskDescriptionOfCompletedTask(n,t):B.returnTaskDescription(n,t),a.addEventListener("blur",(function(e){const r=e.target.value;r&&B.updateTaskDescription(n,t,r)})),r.append(i,a)}(n,a,r),jn(n,a,r),Dn(n,a,r)}}function Ln(n,t){const e=document.querySelector(".newTempSubTaskDiv");if(!e.innerHTML){const r=f("input","tempSubTask");r.classList.add(n),r.classList.add(t),e.append(r),r.addEventListener("blur",(function(n){const t=n.target.classList[1],e=n.target.classList[2];n.target.value&&(B.addSubTaskToTask(t,e,n.target.value),Dn(t,e)),n.target.parentNode.innerText=""}))}}function Dn(n,t,e){const r=document.querySelector(".preSubTaskDiv");let i;r.innerText="",i="complete"===e?B.returnSubtaskListOfCompletedTask(n,t):B.returnSubtaskList(n,t);for(let e=0;e<i.length;e++){const a=Pn(n,t,e,i[e]);a.querySelector('input[type="checkbox"]').addEventListener("click",(()=>{B.insertFromSubtaskListToCompletedSubTaskList(n,t,e),Dn(n,t),jn(n,t)}));const o=a.querySelector(":last-child");o.addEventListener("blur",(()=>{o.value&&B.updateSubTask(n,t,e,o.value)})),r.append(a)}}function jn(n,t,e){const r=document.querySelector(".preCompletedSubTaskDiv");let i;r.innerText="",i="complete"===e?B.returnCompleteSubtaskListOfCompletedTask(n,t):B.returnCompleteSubtaskList(n,t);for(let e=0;e<i.length;e++){const a=Pn(n,t,e,i[e]);a.querySelector('input[type="checkbox"]').addEventListener("click",(()=>{B.insertFromCompleteSubtaskListToSubTaskList(n,t,e),Dn(n,t),jn(n,t)})),a.querySelector(":last-child").disabled=!0;const o=f("hr","crossLine");a.append(o),r.append(a)}}function Pn(n,t,e,r){const i=f("div","inputWrapper");i.classList.add(n),i.classList.add(t);const a=f("input");a.setAttribute("type","checkbox"),a.classList.add(e);const o=f("input","subTaskInput");return o.classList.add(e),o.value=r,i.append(a,o),i}function Mn(){const n=document.querySelector("#popUpContainerDate");n&&n.remove()}function Wn(n){h(),function(n){const t=document.querySelector(".taskContainerHeader");t&&t.remove();const e=f("div","taskContainerHeader"),r=f("h2");r.innerText=n;const i=f("button","clearCompletedTasksButton");i.setAttribute("type","button"),i.innerText="Clear completed tasks",e.append(r,i),document.querySelector(".mainContainer").append(e),i.addEventListener("click",(()=>{B.clearCompletedProject(n),qn.fillCompleteTaskListContainer(n)}))}(n),function(n){!function(){const n=document.querySelector(".taskContainer");n&&n.remove()}();const t=f("div","taskContainer"),e=f("div","taskListContainer");e.classList.add(n);const r=f("div","incompleteTaskContainer"),i=f("div","completedTaskContainer"),a=f("div","inputContainer");e.append(r,i),a.append(...function(n){const t=f("input","taskTitleInput"),e=f("button","inputButton");e.id=n;const r=b('<title>upload</title><path d="M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z" />');return e.append(r),e.addEventListener("click",(function(){const n=document.querySelector(".taskTitleInput").value;if(n){const t=this.id,e=function(n,t="",e=""){return{title:n,notes:t,dueDate:e,subTaskList:[],completeSubTaskList:[],priorityList:[]}}(n);B.appendNewTaskObj(t,e),document.querySelector(".taskTitleInput").value="",qn.fillInCompleteTaskListContainer(t),qn.fillCompleteTaskListContainer(t)}})),[t,e]}(n)),t.append(e,a),document.querySelector(".mainContainer").append(t)}(n),qn.fillInCompleteTaskListContainer(n),qn.fillCompleteTaskListContainer(n)}kn.styleTagTransform=A(),kn.setAttributes=d(),kn.insert=o().bind(null,"head"),kn.domAPI=i(),kn.insertStyleElement=l(),t()(yn.Z,kn),yn.Z&&yn.Z.locals&&yn.Z.locals;const qn=function(n){function t(){const n=document.querySelector(".incompleteTaskContainer");n&&(n.innerText="")}function e(){const n=document.querySelector(".completedTaskContainer");n&&(n.innerText="")}function r(t){return n.returnLatestProjectList()[t]}function i(n){const t=f("fieldset","tagListFieldset"),e=f("legend","tagListLegend");e.innerText="Tags";const r=E.returnLatestTagObject();for(let e=0;e<n.length;e++)if(r.has(n[e])){const i=f("label");i.innerText=r.get(n[e])+", ",t.append(i)}return t.append(e),t}function a(n){const e=r(n);t();const a=document.querySelector(".incompleteTaskContainer");for(let t=0;t<e.length;t++){const r=f("div","taskDiv"),s=f("p","taskTitle");s.innerText=e[t].title;const d=f("div","taskOtherDetailContainer"),c=f("div","taskTagContainer"),l=B.returnTaskPriorityList(n,t);c.append(i(l));const u=f("div","taskDateContainer"),A=B.returnTaskDate(n,t);A&&(u.innerText=En(A,"dd/MM/yyyy")),d.append(c,u),r.addEventListener("click",(function(t){Mn(),Sn(n,t,this)}));const p=f("input",`${t}`);p.classList.add(n),p.setAttribute("type","checkBox"),p.addEventListener("click",(()=>{B.appendFromProjectListToCompleteProjectList(n,t),r.remove(),o(n)})),r.append(p,s,d),a.append(r)}}function o(t){const r=function(t){return n.returnLatestCompletedProjectList()[t]}(t),o=document.querySelector(".completedTaskContainer");e();for(let n=0;n<r.length;n++){const e=f("div","taskDiv"),s=f("p","taskTitle");s.innerText=r[n].title;const d=f("div","taskOtherDetailContainer"),c=f("div","taskTagContainer"),l=B.returnCompletedTaskPriorityList(t,n);c.append(i(l));const u=f("div","taskDateContainer"),A=B.returnTaskDateOfCompleteTask(t,n);A&&(u.innerText=En(A,"dd/MM/yyyy")),d.append(c,u),e.addEventListener("click",(function(n){Mn(),Sn(t,n,this,"complete")}));const p=f("input",`${n}`);p.classList.add(t),p.setAttribute("type","checkBox"),p.checked=!0,p.addEventListener("click",(()=>{B.appendFromCompleteProjectListToProjectList(t,n),s.addEventListener("click",(()=>{})),e.remove(),a(t)})),e.append(p,s,d),o.append(e)}}return{resetInCompleteTaskListContainer:t,resetCompleteTaskListContainer:e,returnTaskListFromProject:r,fillInCompleteTaskListContainer:a,fillCompleteTaskListContainer:o,returnInCompleteTaskListBasedOnProject:function(t){return n.returnLatestCompletedProjectList()[t]}}}(B);function Yn(n=[]){const t=document.querySelector(".sideBarMainProjectListContainer");t&&t.remove();const e=f("ol","sideBarMainProjectListContainer");if(n)for(const t in n){const n=f("div",`${t}`);n.classList.add("project"),n.innerText=`${t}`,e.append(n),n.addEventListener("click",(()=>{Wn(t)}))}document.querySelector(".sideBarMain").append(e)}var On=e(368),Un={};Un.styleTagTransform=A(),Un.setAttributes=d(),Un.insert=o().bind(null,"head"),Un.domAPI=i(),Un.insertStyleElement=l(),t()(On.Z,Un),On.Z&&On.Z.locals&&On.Z.locals,function(){const n=f("div","sidebar"),t=f("h1","sideBarHeader");t.innerText="Hello User";const e=f("div","sideBarMain"),r=f("ol","sideBarMainDaysContainer"),i=function(){const n=f("div","To-Do"),t=f("p");t.innerText="To Do";const e=b('<title>format-list-checks</title><path d="M3,5H9V11H3V5M5,7V9H7V7H5M11,7H21V9H11V7M11,15H21V17H11V15M5,20L1.5,16.5L2.91,15.09L5,17.17L9.59,12.59L11,14L5,20Z" />');return n.append(e,t),n}();r.append(i);const a=f("div","myProjects"),o=f("div");o.innerText="Projects";const s=b('<title>plus</title><path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />');s.classList.add("addProjectIcon"),a.append(o,s);const d=f("div","myTags"),c=f("div");c.innerText="Tags";const l=b('<title>plus</title><path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />');l.classList.add("tagHome"),l.addEventListener("click",(()=>{h(),function(){let n=document.querySelector("#TagHome");n?n.innerText="":(n=document.createElement("div"),n.id="TagHome"),document.querySelector("mainContainer"),function(){const n=document.querySelector(".mainContainer"),t=document.createElement("div");t.id="newTagInputContainer",t.classList.add("hidden");const e=document.createElement("div");e.id="tagInputWrapper";const r=document.createElement("input");r.type="text",r.id="newTag";const i=document.createElement("div"),a=document.createElement("button");a.id="submitNewTag",a.textContent="Submit",a.addEventListener("click",(()=>{r.value&&(t.classList.add("hidden"),function(n){const t=E.returnLatestTagObject(),e=Array.from(t.keys()).pop()+1;E.appendNewTag(e,n),w()}(r.value),r.value="")}));const o=document.createElement("button");o.id="closeNewTagInputContainer",o.textContent="Close",o.addEventListener("click",(()=>{t.classList.add("hidden")})),e.appendChild(document.createElement("div").appendChild(r)),i.appendChild(a),i.appendChild(o),e.appendChild(i),t.appendChild(e),n.appendChild(t),document.body.appendChild(n)}(),function(){const n=document.querySelector("#newTagInputContainer"),t=document.querySelector(".mainContainer"),e=document.createElement("div");e.id="TagHome";const r=f("div","tagButtonContainer"),i=document.createElement("button");i.id="AddTag",i.textContent="Add New Tag",i.addEventListener("click",(()=>{n.classList.remove("hidden")}));const a=document.createElement("button");a.id="removeSelectedTag",a.textContent="Remove Selected Tags",a.addEventListener("click",(()=>{const n=document.querySelectorAll(".tagWrapper");if(n){for(let t=0;t<n.length;t++)if(n[t].firstChild.checked){const e=n[t].firstChild.classList.item(0);E.deleteOneTagObjectProperty(e)}w()}})),r.appendChild(i),r.append(a);const o=document.createElement("div");o.id="TagsContainer",e.appendChild(r),e.appendChild(o),t.appendChild(e)}()}(),w()})),d.append(c,l),e.append(r,a,d),n.append(t,e),document.querySelector("body").appendChild(n),Yn(B.returnLatestProjectList())}();let Hn=f("div","mainContainer");document.querySelector("body").append(Hn),document.querySelector(".addProjectIcon").addEventListener("click",(()=>{!function(){const n=f("div","projectFormContainer");n.classList.add("hidden");const t=f("div","projectFormDiv"),e=f("label");e.setAttribute("for","projectName"),e.innerText="Project Name";const r=f("input");r.setAttribute("id","projectName"),r.setAttribute("type","text");const i=f("div","buttonDiv"),a=f("button","submitButton");a.innerText="Submit";const o=f("button","cancelButton");o.innerText="Cancel",i.append(a,o),t.append(e,r,i),n.append(t),document.querySelector("body").append(n),function(){const n=document.querySelector(".projectFormContainer");document.querySelector(".submitButton").addEventListener("click",(()=>{!function(){const n=document.querySelector("#projectName");n.value&&B.appendNewProject(n.value),n.value="",document.querySelector(".projectFormContainer").classList.add("hidden"),Yn(B.returnLatestProjectList())}(),n.remove()})),document.querySelector(".cancelButton").addEventListener("click",(()=>{n.remove()}))}()}()})),document.querySelector(".To-Do").addEventListener("click",(()=>{Wn("default")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,